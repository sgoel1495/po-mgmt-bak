type Invoices {
    name: String,
    month: String
}

type Joining {
    id: ObjectID,
    empId: String,
    candidate: Candidate!,
    company: Company,
    joiningDate: Date,
    actualStartDate: Date,
    paymentTerms: Int,
    officialEmail: EmailAddress,
    vendor: Vendor!,
    vendorSpoc: Person,
    vendorAcctSpoc: Person,
    vendorRate: Rate!,
    candidateRate: Rate!,
    client: Client!,
    timesheetApprover: Person,
    invoices: [Invoices],
    invoiceFormat: String
}

input JoiningInput {
    empId: String,
    candidate: ObjectID!,
    company: ObjectID,
    joiningDate: Date,
    actualStartDate: Date,
    paymentTerms: Int,
    officialEmail: EmailAddress,
    vendor: ObjectID!
    vendorSpoc: PersonInput,
    vendorAcctSpoc: PersonInput,
    vendorRate: RateInput!,
    candidateRate: RateInput!,
    client: ObjectID!,
    timesheetApprover: PersonInput,
    invoiceFormat: String
}

input JoiningUpdateInput {
    empId: String,
    candidate: ObjectID!,
    company: ObjectID,
    joiningDate: Date,
    actualStartDate: Date,
    paymentTerms: Int,
    officialEmail: EmailAddress,
    vendorSpoc: PersonInput,
    vendorAcctSpoc: PersonInput,
    vendorRate: RateInput!,
    candidateRate: RateInput!,
    timesheetApprover: PersonInput,
    invoiceFormat: String
}

type JoiningOpening {
    joining: Joining,
    opening: Opening
}

type CandidateJoining {
    candidate: Candidate,
    joinings: [JoiningOpening],
}

type CompanyJoining {
    candidate: Candidate,
    vendor: Vendor
}

extend type Query {
    joining(id: ObjectID): Joining
    joiningByCandidate(candidateId: ObjectID,openingId: ObjectID): CandidateJoining
    joiningByBank(companyId: ObjectID): [CompanyJoining]
}

extend type Mutation {
    addJoining(data: JoiningInput, openingId: String): ObjectID
    updateJoining(data: JoiningUpdateInput, joiningId: String): String
}